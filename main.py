import pandas as pd
import random
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
from scipy.stats import spearmanr
from scipy.stats import ttest_ind
from scipy.stats import mannwhitneyu
from scipy.stats import pearsonr

df = pd.read_csv('Данные по использованию климатических систем (1).csv', delimiter=';', skipinitialspace=True, decimal=',')
df.columns = df.columns.str.replace(' ', '_')
df.columns = df.columns.str.lower()
df['возраст'] = df['возраст'].astype(float)
df['оценка_комфорта'] = df['оценка_комфорта'].astype(float)
df['температура_воздуха_в_помещении'] = df['температура_воздуха_в_помещении'].astype(float)
df['скорость_воздуха'] = df['скорость_воздуха'].astype(float)
df['среднемесячная_температура_на_улице'] = df['среднемесячная_температура_на_улице'].astype(float)
df['rh'] = df['rh'].astype(float)
df['утепление'] = df['утепление'].astype(float)
df['температура_воздуха_на_улице'] = df['температура_воздуха_на_улице'].astype(float)
df['ощущение_температуры'] = df['ощущение_температуры'].astype(float)
df['скорость_воздуха'] = df['скорость_воздуха'].astype(float)
df['климат'] = df['климат'].replace('Cубтроп океанич', 'Cубтропический океанический')
df['предпочтительное_изменение_температуры'] = df['предпочтительное_изменение_температуры'].replace('Холодн', 'Холоднее')
df['предпочтительное_изменение_температуры'] = df['предпочтительное_изменение_температуры'].replace('Тепле', 'Теплее')
# Посмотрим где есть пропуски
for i in df.columns:
    print(i)
    print(any(df[i].isnull()))
print()
# В столбце режим_при_смешанном_типе_охлаждения нужно проверить пропуски только при
# смешанном типе охлаждения отфильтруем значения и проверим ещё раз
s1 = df[df['способ_охлаждения'] == 'Смешанный']
print('режим_при_смешанном_типе_охлаждения')
print(any(s1['режим_при_смешанном_типе_охлаждения'].isnull()))
df['режим_при_смешанном_типе_охлаждения'] = df['режим_при_смешанном_типе_охлаждения'].fillna('Не_смешанный')
df['способ_обогрева'] = df['способ_обогрева'].fillna('Нет')
# Заполним пропуски в столбце пол у нас нет данных ни по городу Техас ни по другим городам США.
# Мы не можем заполнить эти пропуски групповой модой. Тогда заполним эти данные случайным
# образом сохранив соотношение мужчин и женщин
# m = df[df['пол'] == 'Мужской']['пол'].count()
# w = df[df['пол'] == 'Женский']['пол'].count()
# al = m + w
# na = len(df) - al
# per = w / al
# lst = []
# for i in range(na):
#     rnd = random.random()
#     if rnd <= per:
#         lst.append('Женский')
#     else:
#         lst.append('Мужской')
lst = ['Женский', 'Мужской', 'Мужской', 'Мужской', 'Женский', 'Мужской', 'Женский', 'Женский', 'Мужской', 'Мужской',
       'Мужской', 'Женский', 'Женский', 'Мужской', 'Женский', 'Женский', 'Мужской', 'Женский', 'Мужской', 'Женский',
       'Мужской', 'Мужской', 'Мужской', 'Мужской', 'Мужской', 'Женский', 'Мужской', 'Мужской', 'Женский', 'Мужской',
       'Мужской', 'Мужской', 'Женский', 'Мужской', 'Мужской', 'Женский', 'Мужской', 'Мужской', 'Женский', 'Мужской',
       'Мужской', 'Мужской', 'Женский', 'Женский', 'Мужской', 'Мужской', 'Женский', 'Женский', 'Мужской', 'Мужской',
       'Мужской', 'Мужской', 'Мужской', 'Женский', 'Мужской', 'Женский', 'Мужской', 'Женский', 'Женский', 'Мужской',
       'Мужской', 'Женский', 'Женский', 'Мужской', 'Мужской', 'Мужской', 'Мужской', 'Мужской', 'Мужской', 'Мужской',
       'Мужской', 'Мужской']
lst = pd.DataFrame(lst)
df['пол'] = df['пол'].fillna(lst[0])
df['температура_воздуха_на_улице'] = df['температура_воздуха_на_улице'].fillna(df['среднемесячная_температура_на_улице'])
# Заполним пропуски в графе возраст медианой по группам горoда и пол.
# df['возраст'] = df['возраст'].fillna('unknown')
a = df.groupby(['пол', 'город'])['возраст'].transform(lambda x: pd.Series.median(x))
a = a.replace('unknown', None)
# Заполним оставшиеся пропуски общей медианой
b = df['возраст'].median()
a = a.fillna(b)
df['возраст'] = df['возраст'].fillna(a)
# Не будем заполнять пропуски ощущение_движения_воздуха_(bool) так  далее эти данные не используются
# Заполним данные оценка_комфорта методом интерполюции по группам
a = df.groupby(['способ_охлаждения', 'режим_при_смешанном_типе_охлаждения', 'способ_обогрева', 'климат'])['оценка_комфорта'].apply(lambda group: group.interpolate())
a = a.reset_index()
df['оценка_комфорта'] = df['оценка_комфорта'].fillna(a['оценка_комфорта'])
# У нас ещё много пропущенных значений
# Остальное заполним групповой медианной оставшиеся удалим, если их нельзя заполнит даже групповой медианой
# Это повод ставить под сомнение их точность
a = df.groupby(['способ_охлаждения', 'режим_при_смешанном_типе_охлаждения', 'климат'])['оценка_комфорта'].transform(lambda x: pd.Series.median(x))
a = a.reset_index()
df['оценка_комфорта'] = df['оценка_комфорта'].fillna(a['оценка_комфорта'])
df = df[df['оценка_комфорта'].notna()]
# Обработаем выбросы в колонке температура_воздуха_в_помещении это могло произойти из-за ошибок в измерительных приборах
H = 3 * (df['температура_воздуха_в_помещении'].quantile(q=0.75) - df['температура_воздуха_в_помещении'].quantile(q=0.25))
maxi = df['температура_воздуха_в_помещении'].quantile(q=0.75) + H
mini = df['температура_воздуха_в_помещении'].quantile(q=0.25) - H
df.loc[df['температура_воздуха_в_помещении'] > maxi, 'температура_воздуха_в_помещении'] = None
df.loc[df['температура_воздуха_в_помещении'] < mini, 'температура_воздуха_в_помещении'] = None
a = df.groupby(['климат', 'способ_охлаждения', 'режим_при_смешанном_типе_охлаждения', 'способ_обогрева'])['температура_воздуха_в_помещении'].transform(lambda x: pd.Series.median(x))
df['температура_воздуха_в_помещении'] = df['температура_воздуха_в_помещении'].fillna(a)
# Обработаем выброся в графе скорость_воздуха они могли возникнуть из-за урагана это слишком большие значения
H = 1.5 * (df['скорость_воздуха'].quantile(q=0.75) - df['скорость_воздуха'].quantile(q=0.25))
maxi = df['скорость_воздуха'].quantile(q=0.75) + H
mini = df['скорость_воздуха'].quantile(q=0.25) - H
df.loc[df['скорость_воздуха'] > maxi, 'скорость_воздуха'] = None
df.loc[df['скорость_воздуха'] < mini, 'скорость_воздуха'] = None
a = df.groupby(['климат', 'способ_охлаждения', 'режим_при_смешанном_типе_охлаждения'])['скорость_воздуха'].transform(lambda x: pd.Series.median(x))
df['скорость_воздуха'] = df['скорость_воздуха'].fillna(a)
# Обработаем выброся в графе среднемесячная_температура_на_улице они могли возникнуть из-за ошибки ввода или прибора
H = 3 * (df['среднемесячная_температура_на_улице'].quantile(q=0.75) - df['среднемесячная_температура_на_улице'].quantile(q=0.25))
maxi = df['среднемесячная_температура_на_улице'].quantile(q=0.75) + H
mini = df['среднемесячная_температура_на_улице'].quantile(q=0.25) - H
df.loc[df['среднемесячная_температура_на_улице'] > maxi, 'среднемесячная_температура_на_улице'] = None
df.loc[df['среднемесячная_температура_на_улице'] < mini, 'среднемесячная_температура_на_улице'] = None
a = df.groupby(['климат', 'способ_охлаждения', 'режим_при_смешанном_типе_охлаждения'])['среднемесячная_температура_на_улице'].transform(lambda x: pd.Series.median(x))
df['среднемесячная_температура_на_улице'] = df['среднемесячная_температура_на_улице'].fillna(a)
# Обработаем дубликаты
dub_by = ['способ_охлаждения', 'режим_при_смешанном_типе_охлаждения', 'ощущение_температуры',
          'предпочтительное_изменение_температуры', 'предпочтительное_изменение_движения_воздуха',
          'способ_обогрева', 'rh']
df = df.drop_duplicates(subset=dub_by)
df['способ_охлаждения_без_смешанного'] = df['способ_охлаждения'].replace('Смешанный', None)
df['способ_охлаждения_без_смешанного'] = df['способ_охлаждения_без_смешанного'].fillna(df['режим_при_смешанном_типе_охлаждения'])
a = df.groupby(['способ_охлаждения_без_смешанного'])[['температура_воздуха_в_помещении','rh']].median()
print(a)
df.loc[(df['rh'] >= 40) & (df['rh'] <= 60), 'влажность_воздуха'] = 'Влажность в пределах рекомендуемой'
df.loc[(df['rh'] > 30) & (df['rh'] < 40), 'влажность_воздуха'] = 'Влажность ниже рекомендуемой'
df.loc[(df['rh'] > 60) & (df['rh'] < 70), 'влажность_воздуха'] = 'Влажность выше рекомендуемой'
df.loc[df['rh'] >= 70, 'влажность_воздуха'] = 'Слишком высокая влажность'
df.loc[df['rh'] <= 30, 'влажность_воздуха'] = 'Слишком низкая влажность'


#создание доп.категориального столбца по количеству рекламаций
df['количество_рекламаций_доп'] = df['количество_рекламаций'].apply(lambda x: 'мало' if x <= 1 else ('средне' if x == 2 else 'много'))

#создание категориального столбца по категориям возраста
df['категория_возраста'] = df['возраст'].apply(lambda x: 'молодой' if x <= 44 else ('средний' if 45 <= x <= 59 else 'пожилой'))

#расчет среднего возраста по полу
df_average_age_sex = df.groupby(['пол'])['возраст'].mean()
print(df_average_age_sex)

#расчет среднего возраста по стране
df_average_age_country = df.groupby(['страна'])['возраст'].mean()
print(df_average_age_country)

#расчет средней комфортной температуры в зависимости от возрастной категории
df_average_comf_temp_age = df[df['предпочтительное_изменение_температуры'] == 'Без изменений'].groupby(['категория_возраста'])['температура_воздуха_в_помещении'].mean()
print(df_average_comf_temp_age)

# №6 Добавить столбец с процентом удовлетворенных респондентов

df['удовлетворен_температурой'] = np.where(df['предпочтительное_изменение_температуры'] == 'Без изменений', 1, 0)
s = df.groupby(['страна', 'пол'])['удовлетворен_температурой'].mean() * 100

df['удовлетворен_температурой'] = np.where(df['предпочтительное_изменение_температуры'] == 'Без изменений', 1, 0)
s = df.groupby(['страна', 'пол'])['удовлетворен_температурой'].mean().reset_index(name='проц_удовл')
s['проц_удовл'] = 100 * s['проц_удовл']
df = df.merge(s)

#№7
#Составить таблицу сгруппированы по стране,полу, возрастy
#+ средняя температура в помещении/улице + средняя влажность

df.loc[df['среднемесячная_температура_на_улице'] > maxi, 'среднемесячная_температура_на_улице'] = df['среднемесячная_температура_на_улице'].quantile(q=0.5)
df.loc[df['среднемесячная_температура_на_улице'] < mini, 'среднемесячная_температура_на_улице'] = df['среднемесячная_температура_на_улице'].quantile(q=0.5)

df['температура_воздуха_на_улице'] = df['температура_воздуха_на_улице'].astype(float)
df['rh'] = df['rh'].astype(float)

df_7_1 = df.groupby(['страна', 'пол', 'возраст'])['температура_воздуха_в_помещении'].mean().reset_index(name='средня_темп_пом')
df_7_2 = df.groupby(['страна', 'пол', 'возраст'])['температура_воздуха_на_улице'].mean().reset_index(name='средня_темп_улц')
df_7_3 = df.groupby(['страна', 'пол', 'возраст'])['rh'].mean().reset_index(name='средня_отн_влаж')
df_7 = df_7_1.merge(df_7_2).merge(df_7_3)

#№9 Исследовать корреляцию между параметрами
df_num = df[['rh', 'температура_воздуха_на_улице', 'возраст', 'проц_удовл', 'удовлетворен_температурой',
                 'среднемесячная_температура_на_улице', 'скорость_воздуха', 'температура_воздуха_в_помещении',
                 'оценка_комфорта']]
df_corr = df_num.corr()
sns.heatmap(df_corr, annot=True, cmap='coolwarm')
plt.show()


# Влияет ли способ охлаждения на оценку комфорта?
cond = df[df['способ_охлаждения_без_смешанного'] == 'Кондиционирование']['оценка_комфорта']
vent = df[df['способ_охлаждения_без_смешанного'] == 'Вентиляция']['оценка_комфорта']
v_c = ttest_ind(cond, vent)
print(v_c.pvalue, "p уровень для способа охлаждения и оценку комфорта")
# Влияет ли степень утепления на оценку комфорта?
tep_comf = spearmanr(df['утепление'], df['оценка_комфорта'])
print(tep_comf.pvalue, "p уровень для утепления и оценку комфорта")
print(tep_comf.statistic, "корреляция между утеплением и оценкой комфорта")


#влияние пола на оценку кофморта
male = df[df['пол'] == 'Женский']['оценка_комфорта']
female = df[df['пол'] == 'Мужской']['оценка_комфорта']
pvalue_sex = mannwhitneyu(male, female, alternative = 'two-sided')[1]
#тк по итогу p-уровень более 0.05, то влияния пола на оценку комфорта НЕ ОБНАРУЖЕНО

#влияние температуры в помещении на оценку кофморта
df1 = df.dropna(subset='температура_воздуха_в_помещении')
indoor_temp  = pearsonr(df1['температура_воздуха_в_помещении'], df1['оценка_комфорта'])
print('влияние температуры в помещении на оценку кофморта:')
print(indoor_temp)
#тк по итогу p-уровень более 0.05,
#то влияния температуры в помещении на оценку кофморта НЕ ОБНАРУЖЕНО
#Коэффициент корреляции отрицательный -> увеличение температуры в помещении ведет к уеньшению комфорта

#влияние температуры на улице на оценку кофморта
df1 = df.dropna(subset='температура_воздуха_на_улице')
outdoor_temp  = pearsonr(df1['температура_воздуха_на_улице'], df1['ПРОВЕРКАоценка_комфорта'])
print('влияние температуры на улице на оценку кофморта:')
print(outdoor_temp)
#тк по итогу p-уровень менее 0.05,
#то влияния температуры на улице на оценку кофморта ОБНАРУЖЕНО
#Коэффициент корреляции отрицательный -> увеличение температуры на улице ведет к уеньшению комфорта

# влияние количества рекламаций на оценку комфорта
print('влияние количества рекламаций на оценку комфорта:')
print(pearsonr(df['количество_рекламаций'], df['оценка_комфорта']))
# p-value < 0.05 -> количество рекламаций влияет на оценку комфорта
# коэффициент корреляции = -0.49 -> увеличение количества рекламаций ведёт к уменьшению комфорта

# проверка зависимости средней оценки комфорта от страны
print('зависимость средней оценки комфорта от страны')
labels, categories = pd.factorize(df['страна'])
df["страна_кол"] = labels
print(pearsonr(df['страна_кол'], df['оценка_комфорта']))
# p-value < 0.05 -> оценка комфорта зависит от страны
a = df.groupby('страна')['оценка_комфорта']
for k, i in a:
  print(f'{k} - {i.mean()}')
# средние оценки в странах различаются

#Влияет ли возрастная группа на оценку комфорта
#проверка на нормальность (возраст)
print(round(shapiro(df['возраст'])[1], 2))
df.hist(column='возраст')
#проверка на нормальность (оценка_комфорта)
print(round(shapiro(df['оценка_комфорта'])[1], 2))
df.hist(column='оценка_комфорта')

print('влияние возрастной группы на оценку комфорта:')
print(spearmanr(df['возраст'], df['оценка_комфорта']))
#получаем то что p-уровень +- = 0
#следовательно какая либо корреляция отсутствует
